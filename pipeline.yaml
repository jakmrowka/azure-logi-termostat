trigger:
- main

parameters:
- name: buildImage
  displayName: 'Build Docker Image'
  type: boolean
  default: true
- name: helmOperation
  displayName: 'Helm Operation'
  type: string
  default: 'both'
  values:
    - install
    - uninstall
    - both

variables:
  dockerhub-user: 'gadzina13'
  Miejsce: 'Limanowa_helm'
  image_name: 'gad_docker_logi_termostat'
  tag: 'latest'
  dockerImage: $(dockerhub-user)/$(image_name):$(tag)
  buildImage: ${{ parameters.buildImage }}
  helmOperation: ${{ parameters.helmOperation }}
  es_index: 'search-termostat'
  es_url: 'http://87.207.10.127'

stages:
- stage: Docker
  condition: eq(variables.buildImage, true)
  pool:
    name: gads-agent-pool
    demands:
      - agent.name -equals gad-mini-pc2
  jobs:
  - job: BuildAndPushDocker
    steps:
    - checkout: self
    - task: AzureKeyVault@2
      inputs:
        azureSubscription: 'Azure dla studentów(232fe18a-7562-4ae5-9507-29d2bde01130)'
        KeyVaultName: 'credentialsforproject'
        SecretsFilter: '*'
        RunAsPreJob: true
    - script: |
        docker build -t $(dockerImage) -f app/Dockerfile app/
      displayName: 'Build Docker Image'
    - script: |
        docker login -u $(dockerhub-username) -p $(dockerhub-password)
      displayName: 'Login to Docker Hub'
    - script: |
        docker push $(dockerImage)
      displayName: 'Push Docker Image to Docker Hub'

- stage: microk8s
  condition: always()
  pool:
    name: gads-agent-pool
    demands:
      - agent.name -equals gad-agent-pi4b
  jobs:
  - job: microK8sDeploy
    steps:
    - checkout: self
    - task: AzureKeyVault@2
      inputs:
        azureSubscription: 'Azure dla studentów(232fe18a-7562-4ae5-9507-29d2bde01130)'
        KeyVaultName: 'credentialsforproject'
        SecretsFilter: '*'
        RunAsPreJob: false
    - task: qetza.replacetokens.replacetokens-task.replacetokens@3
      inputs:
        targetFiles: |
          helm/values.yaml
        encoding: 'auto'
        writeBOM: true
        actionOnMissing: 'fail'
        keepToken: false
        tokenPrefix: '#{'
        tokenSuffix: '}#'
        useLegacyPattern: false
        enableTelemetry: true
    - task: DownloadSecureFile@1
      name: kubeconfig
      inputs:
        secureFile: 'klaster_config'
    - script: |
        echo "Using Helm to lint the chart..."
        export KUBECONFIG=$(kubeconfig.secureFilePath)
        helm lint helm/
      displayName: 'Lint Helm Chart'
    - script: |
        export KUBECONFIG=$(kubeconfig.secureFilePath)
        case "$(helmOperation)" in
          "install")
            echo "Installing with Helm..."
            helm upgrade --install logi-termostat helm/ --insecure-skip-tls-verify
            ;;
          "uninstall")
            echo "Uninstalling Helm chart..."
            helm uninstall logi-termostat
            ;;
          "both")
            echo "Reinstalling Helm chart..."
            helm uninstall logi-termostat
            helm upgrade --install logi-termostat helm/ --insecure-skip-tls-verify
            ;;
        esac
      displayName: 'Helm Operations'